name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: t2foundation-website
  REGION: asia-south2
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Authorize Docker push for Artifact Registry
      run: |
        gcloud auth configure-docker asia-south2-docker.pkg.dev
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=asia-south2 \
          --description="Repository for Vue application" \
          --quiet || true

    - name: Build and push Docker image
      run: |
        docker build -t asia-south2-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ github.sha }} .
        docker push asia-south2-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ github.sha }}

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image asia-south2-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated
        
        URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        echo "url=$URL" >> $GITHUB_OUTPUT
        
        if ! gcloud run domain-mappings describe --service=$SERVICE_NAME --region=$REGION --domain=$DOMAIN_NAME 2>/dev/null; then
          echo "Creating domain mapping..."
          gcloud run domain-mappings create \
            --service $SERVICE_NAME \
            --domain $DOMAIN_NAME \
            --region $REGION
        fi
        
        MAPPING_INFO=$(gcloud run domain-mappings describe --service=$SERVICE_NAME --region=$REGION --domain=$DOMAIN_NAME --format=json)
        IP_ADDRESS=$(echo $MAPPING_INFO | jq -r '.status.resourceRecords[] | select(.type=="A") | .rrdata')
        echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

    - name: Update DNS Records
      run: |
        if ! gcloud dns managed-zones list --filter="name=t2foundation" | grep t2foundation; then
          gcloud dns managed-zones create t2foundation --dns-name=$DOMAIN_NAME. --description="DNS zone for $DOMAIN_NAME"
        fi
        
        gcloud dns record-sets transaction start --zone=t2foundation
        
        if gcloud dns record-sets list --zone=t2foundation --name="$DOMAIN_NAME." --type=A | grep "$DOMAIN_NAME."; then
          gcloud dns record-sets transaction remove --zone=t2foundation --name="$DOMAIN_NAME." --type=A --ttl=300 "$(gcloud dns record-sets list --zone=t2foundation --name="$DOMAIN_NAME." --type=A --format='value(rrdatas)')"
        fi
        
        gcloud dns record-sets transaction add --zone=t2foundation --name="$DOMAIN_NAME." --type=A --ttl=300 "${{ env.IP_ADDRESS }}"
        
        if gcloud dns record-sets list --zone=t2foundation --name="www.$DOMAIN_NAME." --type=CNAME | grep "www.$DOMAIN_NAME."; then
          gcloud dns record-sets transaction remove --zone=t2foundation --name="www.$DOMAIN_NAME." --type=CNAME --ttl=300 "$(gcloud dns record-sets list --zone=t2foundation --name="www.$DOMAIN_NAME." --type=CNAME --format='value(rrdatas)')"
        fi
        
        gcloud dns record-sets transaction add --zone=t2foundation --name="www.$DOMAIN_NAME." --type=CNAME --ttl=300 "$DOMAIN_NAME."
        
        gcloud dns record-sets transaction execute --zone=t2foundation
        
    - name: Output Deployment Info
      run: |
        echo "Deployed to Cloud Run at: ${{ steps.deploy.outputs.url }}"
        echo "Custom domain: https://$DOMAIN_NAME"
        echo "Remember that DNS changes may take up to 24-48 hours to fully propagate."